{"version":3,"sources":["components/Recursive-Backtracker/RecursiveBacktrackerNode.jsx","components/Recursive-Backtracker/RecursiveBacktracker.jsx","components/MainPage/MainPage.jsx","components/AldousBroder/AldousBroderNode.jsx","components/AldousBroder/AldousBroder.jsx","Maze.js","index.js"],"names":["Node","props","node","row","col","id","className","stack","dRow","dCol","directionArray","windowWidth","Math","floor","window","innerWidth","windowHeight","innerHeight","RecursiveBacktracker","useState","grid","setGrid","useEffect","getInitialGrid","initialGrid","currentRow","push","createNode","isVisited","disableEverything","enableOrDisable","navbar","document","getElementsByClassName","generateButton","style","pointerEvents","generateMaze","curr","prev","getElementById","classList","add","RecursiveBacktrackerInterval","setInterval","length","currentNode","remove","i","isValid","canVisitNeighbour","j","random","shuffle","adjX","adjY","currentNodeElement","removeWalls","xx","pop","clearInterval","nextNodeDirection","newRow","newCol","nextNodeElement","direction","aria-hidden","focusable","data-prefix","data-icon","role","xmlns","viewBox","fill","d","map","href","onClick","location","reload","MainPage","AldousBroder","action","remaining","AldousBroderInterval","Maze","to","path","exact","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d7ceb840.chunk.js","sourcesContent":["import './RecursiveBacktrackerNode.css';\n\nconst Node = (props) => {\n   const {row,col} = props.node;\n\n\treturn ( \n\t\t<div\n\t\t\tid={`RecursiveBacktracker-node-${row}-${col}`}\n\t\t\tclassName={`RecursiveBacktracker-node RecursiveBacktracker-left-wall RecursiveBacktracker-right-wall RecursiveBacktracker-top-wall RecursiveBacktracker-bottom-wall`}\n\t\t></div>\n\t);\n}\n \nexport default Node;","import { useState, useEffect} from 'react';\nimport Node from './RecursiveBacktrackerNode';\nimport './RecursiveBacktracker.css';\n\n//constants\nlet stack = [];\nconst dRow = [-1, 0, 1, 0]; \nconst dCol = [0, 1, 0, -1];\nlet directionArray = [0,1,2,3];\n\nconst windowWidth =  Math.floor((window.innerWidth-400)/24);\nconst windowHeight =  Math.floor((window.innerHeight-400)/24);\n\nlet speed=30;\n\n\nconst RecursiveBacktracker = () => {\n    //Hooks\n\tlet [grid, setGrid] = useState([]);\n\n\t//when our page first mounts\n\tuseEffect(() => {\n\t\tsetGrid(getInitialGrid());\n\t}, []);\n\n\n\n\t// =========== Additional Functions =============\n\n\t//Creates Inital grid\n\tconst getInitialGrid = () => {          \n\t\tconst initialGrid= [];\n\t\tfor (let row = 0; row < windowHeight; row++) {\n\t\t\tconst currentRow = [];\n\t\t\tfor (let col = 0; col < windowWidth; col++) {\n\t\t\t\tcurrentRow.push(createNode(row,col));\n\t\t\t}\n\t\t\tinitialGrid.push(currentRow);\n\t\t}\n\n\t\treturn initialGrid;\n\t}\n\n\t//Creates the node template\n\tconst createNode = (row, col) => {\n\t\treturn {\n\t\t\trow,\n\t\t\tcol,\n\t\t\tisVisited : 0,\n\t\t}\n\t}\n\n    function disableEverything(enableOrDisable){\n        const navbar = document.getElementsByClassName('navbar')[0];\n        const generateButton = document.getElementsByClassName('RecursiveBacktracker-generate-button')[0];\n\n        if(enableOrDisable){\n            navbar.style.pointerEvents = \"none\";\n            generateButton.style.pointerEvents = \"none\"\n        }\n        else{\n            navbar.style.pointerEvents = \"auto\";\n            generateButton.style.pointerEvents = \"auto\"\n        }\n    }\n\n    \n    const generateMaze = () => {\n        //Disable everything\n        disableEverything(true);\n\n        //initially push (0,0) to stack\n        stack.push({row:0, col:0});\n\n        let curr, prev;\n        prev = document.getElementById(`RecursiveBacktracker-node-${0}-${0}`);\n        prev.classList.add('consideration');\n\n            \n        let RecursiveBacktrackerInterval = setInterval(() => {\n            //if there is somthing in stack\n            if(stack.length > 0){\n\n                //current node is under consideration\n                let currentNode = stack[stack.length-1];\n                grid[currentNode.row][currentNode.col].isVisited = 1;\n\n                prev.classList.remove('consideration')\n                prev.classList.add('fully-visited');\n                curr = document.getElementById(`RecursiveBacktracker-node-${currentNode.row}-${currentNode.col}`);\n                curr.classList.remove('fully-visited')\n                curr.classList.add('consideration');\n\n\n                //if there are no neighbor cells to visit from current cell then start popping\n                if(!canVisitNeighbour(currentNode)){\n                    let xx = stack.pop();\n                    grid[xx.row][xx.col].isVisited = 2;\n\n                    prev = document.getElementById(`RecursiveBacktracker-node-${xx.row}-${xx.col}`);\n                }\n\n                //if there are neighbours that i can visit\n                else{\n                    //Randomly choose an valid adjacent cell that has not been visited\n                    shuffle(directionArray);\n                    for(let i of directionArray){\n                        if(isValid(currentNode.row, currentNode.col, i)){\n                            const adjX = currentNode.row + dRow[i];\n                            const adjY = currentNode.col + dCol[i];\n\n                            //remove walls b/w current and next element\n                            const currentNodeElement = document.getElementById(`RecursiveBacktracker-node-${currentNode.row}-${currentNode.col}`);\n                            const nextNodeElement = document.getElementById(`RecursiveBacktracker-node-${adjX}-${adjY}`);\n                            removeWalls(currentNodeElement, nextNodeElement, i);\n\n\n                            prev = currentNodeElement;\n\n                            stack.push({row:adjX, col:adjY});\n                            break;\n                        }\n                    }\n                }\n            }\n\n            else{\n                disableEverything(false);\n                clearInterval(RecursiveBacktrackerInterval);\n            }\n\n\n        }, speed);\n\n\n\n\n\n\n\n\n        // let RecursiveBacktrackerInterval = setInterval(() => {\n            \n        //     if(stack.length > 0){\n        //         //pop the top element and set it as current element\n        //         let currentNode = stack.pop();\n            \n        //         //if node is not visited then visit it\n        //         if(!grid[currentNode.row][currentNode.col].isVisited){\n                    \n        //             //process the node i.e remove walls\n        //             const x = currentNode.row - currentNode.parent.row;\n        //             const y = currentNode.col - currentNode.parent.col;\n        //             const currentNodeElement = document.getElementById(`RecursiveBacktracker-node-${currentNode.row}-${currentNode.col}`);\n        //             const previousNodeElement = document.getElementById(`RecursiveBacktracker-node-${currentNode.parent.row}-${currentNode.parent.col}`);\n                \n                \n        //             if(x === -1 && y===0)\n        //                 removeWalls(currentNodeElement, previousNodeElement, 0);\n        //             else if(x === 0 && y===1)\n        //                 removeWalls(currentNodeElement, previousNodeElement, 1);\n        //             else if(x === 1 && y===0)\n        //                 removeWalls(currentNodeElement, previousNodeElement, 2);\n        //             else if(x === 0 && y===-1)\n        //                 removeWalls(currentNodeElement, previousNodeElement, 3);\n                \n                \n        //             //visite the node\n        //             grid[currentNode.row][currentNode.col].isVisited = true;\n        //             document.getElementById(`RecursiveBacktracker-node-${currentNode.row}-${currentNode.col}`).classList.add('RecursiveBacktracker-node-visited');\n                    \n                \n        //             //add adjacent unvisited neighbors of current node randomly to stack\n        //             shuffle(directionArray);\n        //             for(let i of directionArray){\n        //                 if(isValid(currentNode.row, currentNode.col, i)){\n        //                     const adjX = currentNode.row + dRow[i];\n        //                     const adjY = currentNode.col + dCol[i];\n        //                     stack.push({row : adjX, col : adjY, parent : {row: currentNode.row, col:currentNode.col}});\n        //                 }\n        //             }\n        //         }\n        //     }\n\n        //     else{\n        //         disableEverything(false);\n        //         clearInterval(RecursiveBacktrackerInterval);\n        //     }\n\n        // }, speed);\n\n    }\n\n  \n    function canVisitNeighbour(currentNode){\n        for(let i of directionArray){\n            if(isValid(currentNode.row, currentNode.col, i)){\n                return true;\n            }\n        }\n\n        return false;\n    }\n \n    //checks if next node is valid\n    function isValid(row, col, nextNodeDirection){\n        const newRow = row + dRow[nextNodeDirection];\n        const newCol = col + dCol[nextNodeDirection];\n    \n        if (newRow < 0 || newCol < 0 || newRow >= windowHeight || newCol >= windowWidth)\n        return false;\n    \n        if (grid[newRow][newCol].isVisited >= 1)\n        return false;\n        \n        return true;\n    }\n    \n    //randomly shuffles the direction array\n    function shuffle() {\n        for (let i = directionArray.length-1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [directionArray[i], directionArray[j]] = [directionArray[j], directionArray[i]];\n        }\n        return directionArray;\n    }\n    \n    //remove walls between current and previous element\n    //removes walls and and a fake wall in its place\n    function removeWalls(currentNodeElement, nextNodeElement, direction){\n        if(direction === 0){ //up\n            currentNodeElement.classList.remove('RecursiveBacktracker-top-wall');\n            nextNodeElement.classList.remove('RecursiveBacktracker-bottom-wall');\n    \n            currentNodeElement.classList.add('RecursiveBacktracker-fake-top-wall');\n            nextNodeElement.classList.add('RecursiveBacktracker-fake-bottom-wall');\n        }\n        else if(direction === 1){ //right\n            currentNodeElement.classList.remove('RecursiveBacktracker-right-wall');\n            nextNodeElement.classList.remove('RecursiveBacktracker-left-wall');\n    \n            currentNodeElement.classList.add('RecursiveBacktracker-fake-right-wall');\n            nextNodeElement.classList.add('RecursiveBacktracker-fake-left-wall');\n        }\n        else if(direction === 2){ //down\n            currentNodeElement.classList.remove('RecursiveBacktracker-bottom-wall');\n            nextNodeElement.classList.remove('RecursiveBacktracker-top-wall');\n    \n            currentNodeElement.classList.add('RecursiveBacktracker-fake-bottom-wall');\n            nextNodeElement.classList.add('RecursiveBacktracker-fake-top-wall');\n        }\n        else if(direction === 3){ //left\n            currentNodeElement.classList.remove('RecursiveBacktracker-left-wall');\n            nextNodeElement.classList.remove('RecursiveBacktracker-right-wall');\n    \n            currentNodeElement.classList.add('RecursiveBacktracker-fake-left-wall');\n            nextNodeElement.classList.add('RecursiveBacktracker-fake-right-wall');\n        }\n    }\n\n\n\n\t//resets everything\n\tconst resetAll = () => {\n        window.location.reload();\n\n        // const freshClass = 'node left-wall right-wall top-wall bottom-wall';\n        //     for (let row = 0; row < windowHeight; row++) {\n        //         for (let col = 0; col < windowWidth; col++) {\n        //             document.getElementById(`node-${row}-${col}`).className = freshClass;\n        //         }\n        //     }\n\n        // grid = getInitialGrid();\n        // setGrid(grid);\n        \n        // stack = [];\n        // directionArray = [0,1,2,3];\n\t}\n\n  \n    return(\n        <main className=\"RecursiveBacktracker-main\">\n            <div className=\"RecursiveBacktracker-topic\"> \n                <span>\n                    <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"layer-group\" className=\"svg-inline--fa fa-layer-group fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M12.41 148.02l232.94 105.67c6.8 3.09 14.49 3.09 21.29 0l232.94-105.67c16.55-7.51 16.55-32.52 0-40.03L266.65 2.31a25.607 25.607 0 0 0-21.29 0L12.41 107.98c-16.55 7.51-16.55 32.53 0 40.04zm487.18 88.28l-58.09-26.33-161.64 73.27c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.51 209.97l-58.1 26.33c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 276.3c16.55-7.5 16.55-32.5 0-40zm0 127.8l-57.87-26.23-161.86 73.37c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.29 337.87 12.41 364.1c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 404.1c16.55-7.5 16.55-32.5 0-40z\"></path></svg>\n                    RANDOMIZED DFS\n                </span> \n            </div>\n\n            <div className=\"RecursiveBacktracker-grid\">\n            { grid.map(row => \n                <div className=\"RecursiveBacktracker-grid-div\">\n                {\n                    row.map(node => { return( <Node node = {node} />) })\n                }\n                </div>\n            ) }\n            </div>\n\n            <div className=\"RecursiveBacktracker-functions\">\n                <a href=\"#\" className=\"RecursiveBacktracker-generate-button\" onClick={() => generateMaze()}>Generate Maze</a>\n                <a href=\"#\" className=\"RecursiveBacktracker-reset-button\" onClick={() => resetAll()}>Reset</a>\n            </div>\n\n        </main>\n    );\n}\n \nexport default RecursiveBacktracker;","import './MainPage.css'\n\nconst MainPage = () => {\n    return (\n        <main className=\"mainPage-main\">\n            <div className=\"mainPage-topic\"> \n                <span>\n                <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"puzzle-piece\" className=\"svg-inline--fa fa-puzzle-piece fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M519.442 288.651c-41.519 0-59.5 31.593-82.058 31.593C377.409 320.244 432 144 432 144s-196.288 80-196.288-3.297c0-35.827 36.288-46.25 36.288-85.985C272 19.216 243.885 0 210.539 0c-34.654 0-66.366 18.891-66.366 56.346 0 41.364 31.711 59.277 31.711 81.75C175.885 207.719 0 166.758 0 166.758v333.237s178.635 41.047 178.635-28.662c0-22.473-40-40.107-40-81.471 0-37.456 29.25-56.346 63.577-56.346 33.673 0 61.788 19.216 61.788 54.717 0 39.735-36.288 50.158-36.288 85.985 0 60.803 129.675 25.73 181.23 25.73 0 0-34.725-120.101 25.827-120.101 35.962 0 46.423 36.152 86.308 36.152C556.712 416 576 387.99 576 354.443c0-34.199-18.962-65.792-56.558-65.792z\"></path></svg>\n                    MAZES\n                </span> \n            </div>\n            <p>A maze is a complex structure of interconnected passageways. There should be (at least) one way to get from a designated start location to a designated end. Typically the path is convoluted and branched (these branches can also be branched, and often leading to dead-ends) making it not obvious to the naked eye the correct path to take (even when exposed to a God’s eye view from above with all information exposed).\n                Mazes are even more challenging to solve when you are inside one and are only exposed to the information you can immediately see!</p>\n\n            <h2>Generating mazes</h2>\n            <hr />\n            <p>Different algorithms for generating mazes work in different ways. Some start with a ‘solid’ block and ‘carve’ out passages as they progress. Others start with an ‘empty’ space and ‘build’ walls. The back track recursive algorithm is a carving algorithm: It starts out as a complete grid with all boundaries and walls set and removes walls to generate the labyrinth.\n                In this article I’m using a 2D rectangular grid but the technique can be generalized to any tessellating shapes in any number of dimensions.</p>\n\n            <h2>Properties of mazes</h2>\n            <hr />\n            <p>Mazes have characteristics that describe them. A maze is classified as ‘perfect’ if it does not contain loops (as we will see later, the dual of a maze is a graph, and if this graph is a single tree with no cycles then it is a perfect maze. A perfect maze can also be described as a ‘simply connected’ maze.\n                If a maze is simply connected it is possible to solve it using a wall following algorithm. By always keeping you right hand (or left if you prefer!), against the maze wall and walking around you will walk a path that will eventually visit every location in the maze and return to the same location.</p>\n            \n            <p>Mazes are usually generated using random number generators and even running the same algorithm twice in a row (with different seeds for the random number generator) will produce different results. However, on average, different algorithms have different characteristics and properties. Here are some of these characteristics:</p>\n\n            <ul>\n                <li><span><b>Connected/Complex</b> - We’ve mentioned this already. Is it possible to visit every location by simply following one wall? If so, the maze is simply connected. A simply connected maze does not have any loops.</span></li>\n                <li><span><b>Number of dead-ends</b> - It’s possible to make maze that has no wrong turns at all, it’s just a convoluted loop! This would not be a very challenging maze! The number of dead ends in a maze is the measure of the number of locations in the maze that have only one way in. A maze that has only a few dead-ends, and long pathways in-between, might be quite frustrating as you’d have to go a long distance before finding out you’d gone the wrong way!</span></li>\n                <li><span><b>Length of longest path</b> - This is often measured as percentage. First you find the shortest (optimal) path through the maze, then measure the ratio of the number of cells on this path to all the cells in the maze. A high percentage indicates a fair amount of convolution and twisting of the solution (taking lots of turns in order to get to the destination, and visiting a good measure of the maze before exiting).</span></li>\n                <li><span><b>Convolution</b> - Either measured as twistiness, or its inverse straightness, and is some metric to measure how often in the maze that the path exits a cell on the opposite side of the way it came in, and how often it turns a corner in a cell. The human brain has an easier job following paths that are straight (if you see a long line a cells in a straight line you instantly know that there is a clear path to the end of this section. However, if the path is twisted, you can’t immediately see to the end and have to trace it to find out).</span></li>\n                <li><span><b>Distribution of Valency</b> - Dead ends cells have a valency of one (There is only one way in and out of that cell). Crossroads have a valency of four (in a rectangular grid maze); there are four possible directions to go from this cell. Unbranched corridors have a valency of two, and T-junctions have a valency of three. Different maze algorithms generate different distributions of valencies. An algorithm with a high percentage of T-junctions and crossroads exposes the solver to lots of options. One with a high percentage of corridors (valence two cells), takes the user on long ‘rides’.</span></li>\n                <li><span><b>Complexity</b> - Related to all the above, this is a measure of the average number of ‘decisions’ a solver will have make to get from the start to the end. What is the average number of junctions you’ll encounter when solving a maze? </span></li>\n            </ul>\n        </main>\n    );\n}\nexport default MainPage;","import './AldousBroderNode.css';\n\nconst Node = (props) => {\n   const {row,col} = props.node;\n\n\treturn ( \n\t\t<div\n\t\t\tid={`AldousBroder-node-${row}-${col}`}\n\t\t\tclassName={`AldousBroder-node AldousBroder-left-wall AldousBroder-right-wall AldousBroder-top-wall AldousBroder-bottom-wall`}\n\t\t></div>\n\t);\n}\n \nexport default Node;","import { useState, useEffect} from 'react';\nimport Node from './AldousBroderNode';\nimport './AldousBroder.css';\n\n//constants\nconst dRow = [-1, 0, 1, 0]; \nconst dCol = [0, 1, 0, -1];\nlet directionArray = [0,1,2,3];\n\nconst windowWidth =  Math.floor((window.innerWidth-400)/24);\nconst windowHeight =  Math.floor((window.innerHeight-400)/24);\n\n\nlet speed=1;\n\n\nconst AldousBroder = () => {\n    //Hooks\n\tlet [grid, setGrid] = useState([]);\n\n\t//when our page first mounts\n\tuseEffect(() => {\n\t\tsetGrid(getInitialGrid());\n\t}, []);\n\n\n\n\t// =========== Additional Functions =============\n\n\t//Creates Inital grid\n\tconst getInitialGrid = () => {          \n\t\tconst initialGrid= [];\n\t\tfor (let row = 0; row < windowHeight; row++) {\n\t\t\tconst currentRow = [];\n\t\t\tfor (let col = 0; col < windowWidth; col++) {\n\t\t\t\tcurrentRow.push(createNode(row,col));\n\t\t\t}\n\t\t\tinitialGrid.push(currentRow);\n\t\t}\n\n\t\treturn initialGrid;\n\t}\n\n\t//Creates the node template\n\tconst createNode = (row, col) => {\n\t\treturn {\n\t\t\trow,\n\t\t\tcol,\n\t\t\tisVisited : false,\n\t\t}\n\t}\n\n    function disableEverything(action){\n        const navbar = document.getElementsByClassName('navbar')[0];\n        const generateButton = document.getElementsByClassName('AldousBroder-generate-button')[0];\n\n        if(action){\n            navbar.style.pointerEvents = \"none\";\n            generateButton.style.pointerEvents = \"none\";\n        }\n        else{\n            navbar.style.pointerEvents = \"auto\";\n            generateButton.style.pointerEvents = \"auto\";\n        }\n    }\n\n    \n    const generateMaze = () => {\n        //Disable everything\n        disableEverything(true);\n\n        //start at (0,0)\n        let currentNode = {row:0, col:1};\n        let remaining = windowHeight * windowWidth-2;\n\n        let curr, prev;\n\n        //initially (0,0) is visited and under processing\n        grid[0][0].isVisited = true;\n        prev = document.getElementById(`AldousBroder-node-${0}-${0}`);\n        prev.classList.add('AldousBroder-node-under-processing');\n        removeWalls(document.getElementById(`AldousBroder-node-${0}-${0}`),document.getElementById(`AldousBroder-node-${0}-${1}`),1)\n\n        let AldousBroderInterval = setInterval(() => {\n            if(remaining > 0){\n                //visit current node\n                grid[currentNode.row][currentNode.col].isVisited = true;\n\n                curr = document.getElementById(`AldousBroder-node-${currentNode.row}-${currentNode.col}`);\n                curr.classList.add('AldousBroder-node-under-processing');\n                prev.classList.remove('AldousBroder-node-under-processing');\n                prev.classList.add('AldousBroder-node-visited');\n\n                // document.getElementById(`AldousBroder-node-${currentNode.row}-${currentNode.col}`).classList.add('AldousBroder-node-visited');\n\n                //choose a valid neighbour\n                shuffle(directionArray);\n                for(let i of directionArray){\n                    if(isValid(currentNode.row, currentNode.col, i)){\n                        const adjX = currentNode.row + dRow[i];\n                        const adjY = currentNode.col + dCol[i];\n\n                        const currentNodeElement = document.getElementById(`AldousBroder-node-${currentNode.row}-${currentNode.col}`);\n                        const nextNodeElement = document.getElementById(`AldousBroder-node-${adjX}-${adjY}`);\n\n                        //check if that neighbor is visited or not\n                        //if it is not visited then carve a path and decrease remaining\n                        if(!grid[adjX][adjY].isVisited){\n                            removeWalls(currentNodeElement, nextNodeElement, i);\n                            remaining--;\n                        }\n\n                        //no matter what next node will be this\n                        prev = currentNodeElement;\n                        curr = nextNodeElement;\n                        currentNode = {row: adjX, col: adjY};\n                        break;\n                    }\n                }\n\n            }\n\n            else{\n                //run loop one last time to complete maze\n                curr.classList.add('AldousBroder-node-visited');\n                prev.classList.remove('AldousBroder-node-under-processing');\n                prev.classList.add('AldousBroder-node-visited');\n\n                disableEverything(false);\n                clearInterval(AldousBroderInterval);\n            }\n\n        }, speed);\n\n    }\n  \n \n    //checks if next node is valid\n    function isValid(row, col, nextNodeDirection){\n        const newRow = row + dRow[nextNodeDirection];\n        const newCol = col + dCol[nextNodeDirection];\n    \n        if (newRow < 0 || newCol < 0 || newRow >= windowHeight || newCol >= windowWidth)\n        return false;\n    \n        return true;\n    }\n    \n    //randomly shuffles the direction array\n    function shuffle() {\n        for (let i = directionArray.length-1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [directionArray[i], directionArray[j]] = [directionArray[j], directionArray[i]];\n        }\n        return directionArray;\n    }\n    \n    //remove walls between current and previous element\n    //removes walls and and a fake wall in its place\n    function removeWalls(currentNodeElement, nextNodeElement, direction){\n        if(direction === 0){ //up\n            currentNodeElement.classList.remove('AldousBroder-top-wall');\n            nextNodeElement.classList.remove('AldousBroder-bottom-wall');\n    \n            currentNodeElement.classList.add('AldousBroder-fake-top-wall');\n            nextNodeElement.classList.add('AldousBroder-fake-bottom-wall');\n        }\n        else if(direction === 1){ //right\n            currentNodeElement.classList.remove('AldousBroder-right-wall');\n            nextNodeElement.classList.remove('AldousBroder-left-wall');\n    \n            currentNodeElement.classList.add('AldousBroder-fake-right-wall');\n            nextNodeElement.classList.add('AldousBroder-fake-left-wall');\n        }\n        else if(direction === 2){ //down\n            currentNodeElement.classList.remove('AldousBroder-bottom-wall');\n            nextNodeElement.classList.remove('AldousBroder-top-wall');\n    \n            currentNodeElement.classList.add('AldousBroder-fake-bottom-wall');\n            nextNodeElement.classList.add('AldousBroder-fake-top-wall');\n        }\n        else if(direction === 3){ //left\n            currentNodeElement.classList.remove('AldousBroder-left-wall');\n            nextNodeElement.classList.remove('AldousBroder-right-wall');\n    \n            currentNodeElement.classList.add('AldousBroder-fake-left-wall');\n            nextNodeElement.classList.add('AldousBroder-fake-right-wall');\n        }\n    }\n\n\n\n\t//resets everything\n\tconst resetAll = () => {\n        window.location.reload();\n        // const freshClass = 'node left-wall right-wall top-wall bottom-wall';\n        //     for (let row = 0; row < windowHeight; row++) {\n        //         for (let col = 0; col < windowWidth; col++) {\n        //             document.getElementById(`node-${row}-${col}`).className = freshClass;\n        //         }\n        //     }\n\n        // grid = getInitialGrid();\n        // setGrid(grid);\n        \n        // stack = [];\n        // directionArray = [0,1,2,3];\n\t}\n\n  \n    return(\n        <main className=\"AldousBroder-main\">\n            <div className=\"AldousBroder-topic\"> \n                <span>\n                    <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"road\" className=\"svg-inline--fa fa-road fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M573.19 402.67l-139.79-320C428.43 71.29 417.6 64 405.68 64h-97.59l2.45 23.16c.5 4.72-3.21 8.84-7.96 8.84h-29.16c-4.75 0-8.46-4.12-7.96-8.84L267.91 64h-97.59c-11.93 0-22.76 7.29-27.73 18.67L2.8 402.67C-6.45 423.86 8.31 448 30.54 448h196.84l10.31-97.68c.86-8.14 7.72-14.32 15.91-14.32h68.8c8.19 0 15.05 6.18 15.91 14.32L348.62 448h196.84c22.23 0 36.99-24.14 27.73-45.33zM260.4 135.16a8 8 0 0 1 7.96-7.16h39.29c4.09 0 7.53 3.09 7.96 7.16l4.6 43.58c.75 7.09-4.81 13.26-11.93 13.26h-40.54c-7.13 0-12.68-6.17-11.93-13.26l4.59-43.58zM315.64 304h-55.29c-9.5 0-16.91-8.23-15.91-17.68l5.07-48c.86-8.14 7.72-14.32 15.91-14.32h45.15c8.19 0 15.05 6.18 15.91 14.32l5.07 48c1 9.45-6.41 17.68-15.91 17.68z\"></path></svg>\n                    ALDOUS-BRODER\n                </span> \n            </div>\n\n            <div className=\"AldousBroder-grid\">\n            { grid.map(row => \n                <div className=\"AldousBroder-grid-div\">\n                {\n                    row.map(node => { return( <Node node = {node} />) })\n                }\n                </div>\n            ) }\n            </div>\n\n            <div className=\"AldousBroder-functions\">\n                <a href=\"#\" className=\"AldousBroder-generate-button\" onClick={() => generateMaze()}>Generate Maze</a>\n                <a href=\"#\" className=\"AldousBroder-reset-button\" onClick={() => resetAll()}>Reset</a>\n            </div>\n\n        </main>\n    );\n}\n \nexport default AldousBroder;","import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport './Maze.css';\n\nimport RecursiveBacktracker from './components/Recursive-Backtracker/RecursiveBacktracker';\nimport MainPage from './components/MainPage/MainPage';\nimport AldousBroder from './components/AldousBroder/AldousBroder'\n\n\nconst Maze = () => {\n\treturn (\n    <Router>\n      <nav className=\"navbar\">\n        <ul className=\"navbar-nav\">\n          <li className=\"logo\">\n            <Link className=\"react-link\" to=\"/maze-generator/\">\n              <a href=\"#\" className=\"nav-link\">\n                  <span className=\"link-text logo-text\">MAZE GENERATOR</span>\n                  <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"puzzle-piece\" className=\"svg-inline--fa fa-puzzle-piece fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M519.442 288.651c-41.519 0-59.5 31.593-82.058 31.593C377.409 320.244 432 144 432 144s-196.288 80-196.288-3.297c0-35.827 36.288-46.25 36.288-85.985C272 19.216 243.885 0 210.539 0c-34.654 0-66.366 18.891-66.366 56.346 0 41.364 31.711 59.277 31.711 81.75C175.885 207.719 0 166.758 0 166.758v333.237s178.635 41.047 178.635-28.662c0-22.473-40-40.107-40-81.471 0-37.456 29.25-56.346 63.577-56.346 33.673 0 61.788 19.216 61.788 54.717 0 39.735-36.288 50.158-36.288 85.985 0 60.803 129.675 25.73 181.23 25.73 0 0-34.725-120.101 25.827-120.101 35.962 0 46.423 36.152 86.308 36.152C556.712 416 576 387.99 576 354.443c0-34.199-18.962-65.792-56.558-65.792z\"></path></svg>\n              </a>\n            </Link>\n          </li>\n\n          <li className=\"nav-item\">\n            <Link className=\"react-link\" to=\"/maze-generator/recursive-backtracker\">\n              <a href=\"#\" className=\"nav-link\" >\n                  <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"layer-group\" className=\"svg-inline--fa fa-layer-group fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M12.41 148.02l232.94 105.67c6.8 3.09 14.49 3.09 21.29 0l232.94-105.67c16.55-7.51 16.55-32.52 0-40.03L266.65 2.31a25.607 25.607 0 0 0-21.29 0L12.41 107.98c-16.55 7.51-16.55 32.53 0 40.04zm487.18 88.28l-58.09-26.33-161.64 73.27c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.51 209.97l-58.1 26.33c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 276.3c16.55-7.5 16.55-32.5 0-40zm0 127.8l-57.87-26.23-161.86 73.37c-7.56 3.43-15.59 5.17-23.86 5.17s-16.29-1.74-23.86-5.17L70.29 337.87 12.41 364.1c-16.55 7.5-16.55 32.5 0 40l232.94 105.59c6.8 3.08 14.49 3.08 21.29 0L499.59 404.1c16.55-7.5 16.55-32.5 0-40z\"></path></svg>\n                  <span className=\"link-text\">RANDOMIZED DFS</span>\n              </a>\n            </Link>\n          </li>\n\n          <li className=\"nav-item\">\n            <Link className=\"react-link\" to=\"/rec\">\n              <a href=\"#\" className=\"nav-link\" >\n                  <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"random\" className=\"svg-inline--fa fa-random fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M504.971 359.029c9.373 9.373 9.373 24.569 0 33.941l-80 79.984c-15.01 15.01-40.971 4.49-40.971-16.971V416h-58.785a12.004 12.004 0 0 1-8.773-3.812l-70.556-75.596 53.333-57.143L352 336h32v-39.981c0-21.438 25.943-31.998 40.971-16.971l80 79.981zM12 176h84l52.781 56.551 53.333-57.143-70.556-75.596A11.999 11.999 0 0 0 122.785 96H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12zm372 0v39.984c0 21.46 25.961 31.98 40.971 16.971l80-79.984c9.373-9.373 9.373-24.569 0-33.941l-80-79.981C409.943 24.021 384 34.582 384 56.019V96h-58.785a12.004 12.004 0 0 0-8.773 3.812L96 336H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h110.785c3.326 0 6.503-1.381 8.773-3.812L352 176h32z\"></path></svg>\n                  <span className=\"link-text\">RANDOMIZED PRIM</span>\n              </a>\n            </Link>\n          </li>\n\n          <li className=\"nav-item\">\n            <Link className=\"react-link\" to=\"/rec\">\n              <a href=\"#\" className=\"nav-link\" >\n                  <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"skull\" className=\"svg-inline--fa fa-skull fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M256 0C114.6 0 0 100.3 0 224c0 70.1 36.9 132.6 94.5 173.7 9.6 6.9 15.2 18.1 13.5 29.9l-9.4 66.2c-1.4 9.6 6 18.2 15.7 18.2H192v-56c0-4.4 3.6-8 8-8h16c4.4 0 8 3.6 8 8v56h64v-56c0-4.4 3.6-8 8-8h16c4.4 0 8 3.6 8 8v56h77.7c9.7 0 17.1-8.6 15.7-18.2l-9.4-66.2c-1.7-11.7 3.8-23 13.5-29.9C475.1 356.6 512 294.1 512 224 512 100.3 397.4 0 256 0zm-96 320c-35.3 0-64-28.7-64-64s28.7-64 64-64 64 28.7 64 64-28.7 64-64 64zm192 0c-35.3 0-64-28.7-64-64s28.7-64 64-64 64 28.7 64 64-28.7 64-64 64z\"></path></svg>\n                  <span className=\"link-text\">HUNT AND KILL</span>\n              </a>\n            </Link>\n          </li>\n\n          <li className=\"nav-item\">\n            <Link className=\"react-link\" to=\"/rec\">\n              <a href=\"#\" className=\"nav-link\" >\n                  <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"wind\" className=\"svg-inline--fa fa-wind fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M156.7 256H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h142.2c15.9 0 30.8 10.9 33.4 26.6 3.3 20-12.1 37.4-31.6 37.4-14.1 0-26.1-9.2-30.4-21.9-2.1-6.3-8.6-10.1-15.2-10.1H81.6c-9.8 0-17.7 8.8-15.9 18.4 8.6 44.1 47.6 77.6 94.2 77.6 57.1 0 102.7-50.1 95.2-108.6C249 291 205.4 256 156.7 256zM16 224h336c59.7 0 106.8-54.8 93.8-116.7-7.6-36.2-36.9-65.5-73.1-73.1-55.4-11.6-105.1 24.9-114.9 75.5-1.9 9.6 6.1 18.3 15.8 18.3h32.8c6.7 0 13.1-3.8 15.2-10.1C325.9 105.2 337.9 96 352 96c19.4 0 34.9 17.4 31.6 37.4-2.6 15.7-17.4 26.6-33.4 26.6H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16zm384 32H243.7c19.3 16.6 33.2 38.8 39.8 64H400c26.5 0 48 21.5 48 48s-21.5 48-48 48c-17.9 0-33.3-9.9-41.6-24.4-2.9-5-8.7-7.6-14.5-7.6h-33.8c-10.9 0-19 10.8-15.3 21.1 17.8 50.6 70.5 84.8 129.4 72.3 41.2-8.7 75.1-41.6 84.7-82.7C526 321.5 470.5 256 400 256z\"></path></svg>\n                  <span className=\"link-text\">SIDEWINDER</span>\n              </a>\n            </Link>\n          </li>\n\n          <li className=\"nav-item\">\n            <Link className=\"react-link\" to=\"/maze-generator/aldous-broder\">\n              <a href=\"#\" className=\"nav-link\" >\n                  <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"road\" className=\"svg-inline--fa fa-road fa-w-18\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path fill=\"currentColor\" d=\"M573.19 402.67l-139.79-320C428.43 71.29 417.6 64 405.68 64h-97.59l2.45 23.16c.5 4.72-3.21 8.84-7.96 8.84h-29.16c-4.75 0-8.46-4.12-7.96-8.84L267.91 64h-97.59c-11.93 0-22.76 7.29-27.73 18.67L2.8 402.67C-6.45 423.86 8.31 448 30.54 448h196.84l10.31-97.68c.86-8.14 7.72-14.32 15.91-14.32h68.8c8.19 0 15.05 6.18 15.91 14.32L348.62 448h196.84c22.23 0 36.99-24.14 27.73-45.33zM260.4 135.16a8 8 0 0 1 7.96-7.16h39.29c4.09 0 7.53 3.09 7.96 7.16l4.6 43.58c.75 7.09-4.81 13.26-11.93 13.26h-40.54c-7.13 0-12.68-6.17-11.93-13.26l4.59-43.58zM315.64 304h-55.29c-9.5 0-16.91-8.23-15.91-17.68l5.07-48c.86-8.14 7.72-14.32 15.91-14.32h45.15c8.19 0 15.05 6.18 15.91 14.32l5.07 48c1 9.45-6.41 17.68-15.91 17.68z\"></path></svg>\n                  <span className=\"link-text\">ALDOUS-BRODER</span>\n              </a>\n            </Link>\n          </li>\n\n          <li className=\"nav-item\">\n            <Link className=\"react-link\" to=\"/rec\">\n              <a href=\"#\" className=\"nav-link\" >\n                  <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"tree\" className=\"svg-inline--fa fa-tree fa-w-12\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><path fill=\"currentColor\" d=\"M378.31 378.49L298.42 288h30.63c9.01 0 16.98-5 20.78-13.06 3.8-8.04 2.55-17.26-3.28-24.05L268.42 160h28.89c9.1 0 17.3-5.35 20.86-13.61 3.52-8.13 1.86-17.59-4.24-24.08L203.66 4.83c-6.03-6.45-17.28-6.45-23.32 0L70.06 122.31c-6.1 6.49-7.75 15.95-4.24 24.08C69.38 154.65 77.59 160 86.69 160h28.89l-78.14 90.91c-5.81 6.78-7.06 15.99-3.27 24.04C37.97 283 45.93 288 54.95 288h30.63L5.69 378.49c-6 6.79-7.36 16.09-3.56 24.26 3.75 8.05 12 13.25 21.01 13.25H160v24.45l-30.29 48.4c-5.32 10.64 2.42 23.16 14.31 23.16h95.96c11.89 0 19.63-12.52 14.31-23.16L224 440.45V416h136.86c9.01 0 17.26-5.2 21.01-13.25 3.8-8.17 2.44-17.47-3.56-24.26z\"></path></svg>\n                  <span className=\"link-text\">BINARY-TREE</span>\n              </a>\n            </Link>\n          </li>\n\n          <li className=\"nav-item\">\n            <Link className=\"react-link\" to=\"/rec\">\n              <a href=\"#\" className=\"nav-link\" >\n                  <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fab\" data-icon=\"github\" className=\"svg-inline--fa fa-github fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 496 512\"><path fill=\"currentColor\" d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"></path></svg>\n                  <span className=\"link-text\">GITHUB</span>\n              </a>\n            </Link>\n          </li>\n        </ul>\n      </nav>\n\n\n      <Switch>\n        <Route path=\"/maze-generator/\" exact component={MainPage} />\n        <Route path=\"/maze-generator/recursive-backtracker\" exact component={RecursiveBacktracker} />\n        <Route path=\"/maze-generator/aldous-broder\" exact component={AldousBroder} />\n      </Switch>\n\n    </Router>\n\t);\n}\n\nexport default Maze;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Maze from './Maze'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Maze />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}