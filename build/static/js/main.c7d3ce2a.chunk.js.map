{"version":3,"sources":["Node.jsx","logo.svg","caret-down.svg","Maze.js","reportWebVitals.js","index.js"],"names":["Node","props","node","row","col","id","className","windowWidth","Math","floor","window","innerWidth","windowHeight","innerHeight","stack","dRow","dCol","directionArray","time","speed","isDroppedDown","App","useState","grid","setGrid","useEffect","initialGrid","getInitialGrid","currentRow","push","createNode","isVisited","isValid","nextNodeDirection","newRow","newCol","removeWalls","currentNodeElement","previousNodeElement","direction","setTimeout","classList","remove","add","generateMaze","parent","currentNode","pop","x","y","document","getElementById","i","length","j","random","shuffle","adjX","adjY","dropdownAnimate","dropdownList","style","display","handleDropdownClick","clickedElement","dropdownButton","downCaret","createElement","src","caretDown","innerText","appendChild","Fragment","logo","href","onClick","location","reload","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4QAaeA,EAXF,SAACC,GACX,MAAkBA,EAAMC,KAAjBC,EAAP,EAAOA,IAAIC,EAAX,EAAWA,IAEb,OACC,qBACCC,GAAE,eAAUF,EAAV,YAAiBC,GACbE,UAAS,oDCRH,MAA0B,iCCA1B,MAA0B,uCCSnCC,EAAeC,KAAKC,MAAMC,OAAOC,WAAW,IAC5CC,EAAgBJ,KAAKC,OAAOC,OAAOG,YAAY,KAAK,IAEtDC,EAAQ,GACNC,EAAO,EAAE,EAAG,EAAG,EAAG,GAClBC,EAAO,CAAC,EAAG,EAAG,GAAI,GAClBC,EAAiB,CAAC,EAAE,EAAE,EAAE,GAC1BC,EAAK,EAAGC,EAAM,GAEdC,GAAgB,EA0QLC,EAtQH,WAEX,MAAsBC,mBAAS,IAA/B,mBAAKC,EAAL,KAAWC,EAAX,KAGAC,qBAAU,WACT,IAAIC,EAAcC,IAClBH,EAAQE,KACN,IAOH,IAAMC,EAAiB,WAEtB,IADA,IAAMD,EAAa,GACVvB,EAAM,EAAGA,EAAMS,EAAcT,IAAO,CAE5C,IADA,IAAMyB,EAAa,GACVxB,EAAM,EAAGA,EAAMG,EAAaH,IACpCwB,EAAWC,KAAKC,EAAW3B,EAAIC,IAEhCsB,EAAYG,KAAKD,GAGlB,OAAOF,GAIFI,EAAa,SAAC3B,EAAKC,GAOxB,MANgB,CACfD,MACAC,MACA2B,WAAY,IAOb,SAASC,EAAQ7B,EAAKC,EAAK6B,GACzB,IAAMC,EAAS/B,EAAMY,EAAKkB,GACpBE,EAAS/B,EAAMY,EAAKiB,GAE1B,QAAIC,EAAS,GAAKC,EAAS,GAAKD,GAAUtB,GAAgBuB,GAAU5B,KAGhEgB,EAAKW,GAAQC,GAAQJ,UAQ3B,SAASK,EAAYC,EAAoBC,EAAqBC,GAC1DC,YAAW,WAEO,GAAbD,GACDD,EAAoBG,UAAUC,OAAO,YACrCL,EAAmBI,UAAUC,OAAO,eAEpCJ,EAAoBG,UAAUE,IAAI,iBAClCN,EAAmBI,UAAUE,IAAI,qBAEd,GAAbJ,GACND,EAAoBG,UAAUC,OAAO,cACrCL,EAAmBI,UAAUC,OAAO,aAEpCJ,EAAoBG,UAAUE,IAAI,mBAClCN,EAAmBI,UAAUE,IAAI,mBAEd,GAAbJ,GACND,EAAoBG,UAAUC,OAAO,eACrCL,EAAmBI,UAAUC,OAAO,YAEpCJ,EAAoBG,UAAUE,IAAI,oBAClCN,EAAmBI,UAAUE,IAAI,kBAEd,GAAbJ,IACND,EAAoBG,UAAUC,OAAO,aACrCL,EAAmBI,UAAUC,OAAO,cAEpCJ,EAAoBG,UAAUE,IAAI,kBAClCN,EAAmBI,UAAUE,IAAI,sBAElCxB,EAAMD,GAcb,IAAM0B,EAAe,SAACzC,EAAKC,EAAKyC,GAC9B/B,EAAMe,KAAK,CAAC1B,MAAKC,MAAKyC,WAEtB,IAHyC,iBAKvC,IAAIC,EAAchC,EAAMiC,MAGxB,GAAGxB,EAAKuB,EAAY3C,KAAK2C,EAAY1C,KAAK2B,UACxC,iBAIF,IAAMiB,EAAIF,EAAY3C,IAAM2C,EAAYD,OAAO1C,IACzC8C,EAAIH,EAAY1C,IAAM0C,EAAYD,OAAOzC,IACzCiC,EAAqBa,SAASC,eAAT,eAAgCL,EAAY3C,IAA5C,YAAmD2C,EAAY1C,MACpFkC,EAAsBY,SAASC,eAAT,eAAgCL,EAAYD,OAAO1C,IAAnD,YAA0D2C,EAAYD,OAAOzC,OAG/F,IAAP4C,GAAgB,IAAJC,EACbb,EAAYC,EAAoBC,EAAqB,GACzC,IAANU,GAAe,IAAJC,EACjBb,EAAYC,EAAoBC,EAAqB,GACzC,IAANU,GAAe,IAAJC,EACjBb,EAAYC,EAAoBC,EAAqB,GACzC,IAANU,IAAgB,IAALC,GACjBb,EAAYC,EAAoBC,EAAqB,GAIvDf,EAAKuB,EAAY3C,KAAK2C,EAAY1C,KAAK2B,WAAY,EACnDS,YAAW,WACTU,SAASC,eAAT,eAAgCL,EAAY3C,IAA5C,YAAmD2C,EAAY1C,MAAOqC,UAAUE,IAAI,kBACnFxB,EAAQD,KACXM,EAAQD,GA3CZ,SAAiBN,GACf,IAAK,IAAImC,EAAInC,EAAeoC,OAAO,EAAGD,EAAI,EAAGA,IAAK,CAC9C,IAAME,EAAI9C,KAAKC,MAAMD,KAAK+C,UAAYH,EAAI,IADI,EAEL,CAACnC,EAAeqC,GAAIrC,EAAemC,IAA3EnC,EAAemC,GAF8B,KAE1BnC,EAAeqC,GAFW,MA8ChDE,CAAQvC,GAtC+B,oBAuC1BA,GAvC0B,IAuCvC,IAAI,EAAJ,qBAA4B,CAAC,IAArBmC,EAAoB,QAC1B,GAAGpB,EAAQc,EAAY3C,IAAK2C,EAAY1C,IAAKgD,GAAG,CAC9C,IAAMK,EAAOX,EAAY3C,IAAMY,EAAKqC,GAC9BM,EAAOZ,EAAY1C,IAAMY,EAAKoC,GACpCtC,EAAMe,KAAK,CAAC1B,IAAMsD,EAAMrD,IAAMsD,EAAMb,OAAS,CAAC1C,IAAK2C,EAAY3C,IAAKC,IAAI0C,EAAY1C,SA3CjD,gCAGnCU,EAAMuC,OAAS,GAAE,KAqEnBM,EAAkB,WACtB,IAAMC,EAAeV,SAASC,eAAe,iBAG3CS,EAAaC,MAAMC,QADlB1C,EAC4B,OAGA,QAG/BA,GAAiBA,GAGb2C,EAAsB,SAACC,GAC3B,IAAMC,EAAgBf,SAASC,eAAe,mBACxCe,EAAYhB,SAASiB,cAAc,OACzCD,EAAU5D,UAAY,iBACtB4D,EAAUE,IAAV,UAAmBC,GAEC,IAAjBL,GACDC,EAAeK,UAAW,UAC1BnD,EAAQ,GAEe,IAAjB6C,GACNC,EAAeK,UAAY,OAC3BnD,EAAQ,IAEe,IAAjB6C,GACNC,EAAeK,UAAY,SAC3BnD,EAAQ,IAEe,IAAjB6C,IACNC,EAAeK,UAAY,OAC3BnD,EAAQ,IAGV8C,EAAeM,YAAYL,GAE3BP,KAOH,OACC,eAAC,IAAMa,SAAP,WAGA,qBAAKlE,UAAU,SAAf,SACC,qBAAIA,UAAU,aAAd,UACC,qBAAIA,UAAU,GAAd,cAAkB,qBAAKA,UAAU,OAAO8D,IAAKK,OAC7C,qBAAInE,UAAU,WAAd,cAA0B,mBAAGoE,KAAK,IAAIpE,UAAU,2BAA2BqE,QAAS,kBAAM/B,EAAa,EAAE,EAAG,CAACzC,IAAK,EAAGC,IAAI,KAA/F,4BAA1B,OACA,qBAAIE,UAAU,WAAd,cAA0B,mBAAGoE,KAAK,IAAIpE,UAAU,WAAWqE,QAAS,WAvEpEjE,OAAOkE,SAASC,UAuEU,qBAA1B,OAEA,qBAAIvE,UAAU,WAAd,UACM,oBAAGD,GAAG,kBAAkBC,UAAU,WAAWqE,QAAS,kBAAMhB,KAA5D,oBAAsF,qBAAKrD,UAAU,iBAAiB8D,IAAKC,OAC3H,qBAAIhE,GAAG,gBAAP,UACE,oBAAIsE,QAAS,kBAAMZ,EAAoB,IAAvC,SAA2C,mBAAGW,KAAK,IAAR,uBAC3C,oBAAIC,QAAS,kBAAMZ,EAAoB,IAAvC,SAA2C,mBAAGW,KAAK,IAAR,oBAC3C,oBAAIC,QAAS,kBAAMZ,EAAoB,IAAvC,SAA2C,mBAAGW,KAAK,IAAR,sBAC3C,oBAAIC,QAAS,kBAAMZ,EAAoB,IAAvC,SAA2C,mBAAGW,KAAK,IAAR,+BAOrD,qBAAKpE,UAAU,OAAf,SAEEiB,EAAKuD,KAAI,SAAA3E,GAAG,OACX,8BAEGA,EAAI2E,KAAI,SAAA5E,GAEN,OACC,cAAC,EAAD,CAAMA,KAAQA,kBClQV6E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxC,SAASC,eAAe,SAM1B4B,M","file":"static/js/main.c7d3ce2a.chunk.js","sourcesContent":["import './Node.css'\n\nconst Node = (props) => {\n   const {row,col} = props.node;\n\n\treturn ( \n\t\t<div\n\t\t\tid={`node-${row}-${col}`}\n         className={`node left-wall right-wall top-wall bottom-wall`}\n\t\t></div>\n\t);\n}\n \nexport default Node;","export default __webpack_public_path__ + \"static/media/logo.ed106706.svg\";","export default __webpack_public_path__ + \"static/media/caret-down.27bd7575.svg\";","import React, { useState, useEffect} from 'react';\nimport './Maze.css';\nimport Node from './Node';\nimport logo from './logo.svg';\nimport caretDown from './caret-down.svg';\n\n\n\n//constants\nconst windowWidth =  Math.floor(window.innerWidth/24);\nconst windowHeight =  Math.floor((window.innerHeight-200)/24);\n\nlet stack = [];\nconst dRow = [-1, 0, 1, 0]; \nconst dCol = [0, 1, 0, -1];\nconst directionArray = [0,1,2,3];\nlet time=0, speed=10;\n\nlet isDroppedDown = false;\n\n\n\nconst App = () => {\n\t//Hooks\n\tlet [grid, setGrid] = useState([]);\n\n\t//when our page first mounts\n\tuseEffect(() => {\n\t\tlet initialGrid = getInitialGrid();\n\t\tsetGrid(initialGrid);\n\t}, []);\n\n\n\n\t// =========== Additional Functions =============\n\n\t//Creates Inital grid\n\tconst getInitialGrid = () => {          \n\t\tconst initialGrid= [];\n\t\tfor (let row = 0; row < windowHeight; row++) {\n\t\t\tconst currentRow = [];\n\t\t\tfor (let col = 0; col < windowWidth; col++) {\n\t\t\t\tcurrentRow.push(createNode(row,col));\n\t\t\t}\n\t\t\tinitialGrid.push(currentRow);\n\t\t}\n\n\t\treturn initialGrid;\n\t}\n\n\t//Creates the node template\n\tconst createNode = (row, col) => {\n\t\tconst newNode = {\n\t\t\trow,\n\t\t\tcol,\n\t\t\tisVisited : false,\n\t\t}\n\n\t\treturn newNode;\n\t}\n\n  //checks if next node is valid\n  function isValid(row, col, nextNodeDirection){\n    const newRow = row + dRow[nextNodeDirection];\n    const newCol = col + dCol[nextNodeDirection];\n\n    if (newRow < 0 || newCol < 0 || newRow >= windowHeight || newCol >= windowWidth)\n      return false;\n\n    if (grid[newRow][newCol].isVisited)\n      return false;\n    \n    return true;\n  }\n\n  //remove walls between current and previous element\n  //removes walls and and a fake wall in its place\n  function removeWalls(currentNodeElement, previousNodeElement, direction){\n      setTimeout(() => {\n        \n        if(direction == 0){ //up\n          previousNodeElement.classList.remove('top-wall');\n          currentNodeElement.classList.remove('bottom-wall');\n  \n          previousNodeElement.classList.add('fake-top-wall');\n          currentNodeElement.classList.add('fake-bottom-wall');\n        }\n        else if(direction == 1){ //right\n          previousNodeElement.classList.remove('right-wall');\n          currentNodeElement.classList.remove('left-wall');\n  \n          previousNodeElement.classList.add('fake-right-wall');\n          currentNodeElement.classList.add('fake-left-wall');\n        }\n        else if(direction == 2){ //down\n          previousNodeElement.classList.remove('bottom-wall');\n          currentNodeElement.classList.remove('top-wall');\n  \n          previousNodeElement.classList.add('fake-bottom-wall');\n          currentNodeElement.classList.add('fake-top-wall');\n        }\n        else if(direction == 3){ //left\n          previousNodeElement.classList.remove('left-wall');\n          currentNodeElement.classList.remove('right-wall');\n  \n          previousNodeElement.classList.add('fake-left-wall');\n          currentNodeElement.classList.add('fake-right-wall');\n        }\n      }, speed*time);\n\n  }\n\n  //randomly shuffles the direction array\n  function shuffle(directionArray) {\n    for (let i = directionArray.length-1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [directionArray[i], directionArray[j]] = [directionArray[j], directionArray[i]];\n    }\n    return directionArray;\n  }\n\n  //generates the maze\n  const generateMaze = (row, col, parent) => {\n    stack.push({row, col, parent});\n\n    while(stack.length > 0){\n      //pop the top element and set it as current element\n      let currentNode = stack.pop();\n\n      //if node is visited do nothing\n      if(grid[currentNode.row][currentNode.col].isVisited) \n        continue;\n       \n      \n      //process the node i.e remove walls\n      const x = currentNode.row - currentNode.parent.row;\n      const y = currentNode.col - currentNode.parent.col;\n      const currentNodeElement = document.getElementById(`node-${currentNode.row}-${currentNode.col}`);\n      const previousNodeElement = document.getElementById(`node-${currentNode.parent.row}-${currentNode.parent.col}`);\n\n\n      if(x === -1 && y===0)\n        removeWalls(currentNodeElement, previousNodeElement, 0);\n      else if(x === 0 && y===1)\n        removeWalls(currentNodeElement, previousNodeElement, 1);\n      else if(x === 1 && y===0)\n        removeWalls(currentNodeElement, previousNodeElement, 2);\n      else if(x === 0 && y===-1)\n        removeWalls(currentNodeElement, previousNodeElement, 3);\n\n\n      //visite the node\n      grid[currentNode.row][currentNode.col].isVisited = true;\n      setTimeout(() => {\n        document.getElementById(`node-${currentNode.row}-${currentNode.col}`).classList.add('node-visited');\n      }, speed * time++);\n      setGrid(grid);\n      \n\n      //add adjacent unvisited neighbors of current node randomly to stack\n      shuffle(directionArray);\n      for(let i of directionArray){\n        if(isValid(currentNode.row, currentNode.col, i)){\n          const adjX = currentNode.row + dRow[i];\n          const adjY = currentNode.col + dCol[i];\n          stack.push({row : adjX, col : adjY, parent : {row: currentNode.row, col:currentNode.col}});\n        }\n      }\n    }\n\n  }\n\n\n\t//resets everything\n\tconst resetAll = () => {\n    //temporary solution : reload\n    window.location.reload();\n\n    // const freshClass = 'node left-wall right-wall top-wall bottom-wall';\n\t\t// for (let row = 0; row < windowHeight; row++) {\n\t\t// \tfor (let col = 0; col < windowWidth; col++) {\n    //     document.getElementById(`node-${row}-${col}`).className = freshClass;\n\t\t// \t}\n\t\t// }\n\n    // time=0;\n    // grid = getInitialGrid();\n    // setGrid(grid);\n\n    // stack = [];\n\t}\n\n\n  //dropdown animations\n  const dropdownAnimate = () =>{\n    const dropdownList = document.getElementById(\"dropdown-list\"); \n\n    if(isDroppedDown){\n      dropdownList.style.display = \"none\";\n    }\n    else{\n      dropdownList.style.display = \"block\";\n    }\n\n    isDroppedDown = !isDroppedDown;\n  }\n\n  const handleDropdownClick = (clickedElement) => {\n    const dropdownButton= document.getElementById(\"dropdown-button\"); \n    const downCaret = document.createElement('img');\n    downCaret.className = 'dropdown-caret';\n    downCaret.src = `${caretDown}`;\n\n    if(clickedElement===0){\n      dropdownButton.innerText= \"INSTANT\";\n      speed = 0;\n    }\n    else if(clickedElement===1){\n      dropdownButton.innerText = \"FAST\";\n      speed = 10;\n    }\n    else if(clickedElement===2){\n      dropdownButton.innerText = \"MEDIUM\";\n      speed = 30;\n    }\n    else if(clickedElement===3){\n      dropdownButton.innerText = \"SLOW\";\n      speed = 80;\n    }\n\n    dropdownButton.appendChild(downCaret);\n     \n    dropdownAnimate();\n  }\n\n\n\n\t//==================Finally return ===============\n\n\treturn (\n\t\t<React.Fragment>\n\n\t\t{/* =====Header====== */}\n\t\t<nav className=\"navbar\">\n\t\t\t<ul className=\"navbar-nav\">\n\t\t\t\t<li className=\"\"> <img className=\"logo\" src={logo} /></li>\n\t\t\t\t<li className=\"nav-item\"> <a href=\"#\" className=\"nav-link generate-button\" onClick={() => generateMaze(0,0, {row: 0, col:0})}> generate Maze</a> </li>\n\t\t\t\t<li className=\"nav-item\"> <a href=\"#\" className=\"nav-link\" onClick={() => resetAll()}> Reset </a> </li>\n\n\t\t\t\t<li className=\"dropdown\">\n          <a id=\"dropdown-button\" className=\"nav-link\" onClick={() => dropdownAnimate()}> SPEED <img className=\"dropdown-caret\" src={caretDown} /></a>\n          <ul id=\"dropdown-list\">\n            <li onClick={() => handleDropdownClick(0)}><a href=\"#\">INSTANT</a></li>\n            <li onClick={() => handleDropdownClick(1)}><a href=\"#\">fast</a></li>\n            <li onClick={() => handleDropdownClick(2)}><a href=\"#\">medium</a></li>\n            <li onClick={() => handleDropdownClick(3)}><a href=\"#\">slow</a></li>\n          </ul>\n        </li>\n\t\t\t</ul>\n\t\t</nav>\n\n\t\t{/* =====Grid====== */}\n\t\t<div className=\"grid\">\n\t\t\t{\n\t\t\t\tgrid.map(row => \n\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trow.map(node => \n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t\t\t<Node node = {node} />\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t}\n\t\t</div>\n\t\t</React.Fragment>\n\t);\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Maze from './Maze'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Maze />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}